import os
from collections import deque
import itertools

DefFP = "..\\heat-range\\scripts\\def\\AutoGenFP.cs"
defFile = open(DefFP, "w")

defFile.write("""

// autogenerated

namespace HeatRange
{
    public static partial class Def 
    {
        public static partial class FP
        {
"""
)

def genNamespace(name, indent=8):
    defFile.write("\n" + " "*indent + "public static partial class " + name + "\n")
    defFile.write(" "*indent + "{\n")
    
def closeNamespace(indent=8):
    defFile.write(" "*indent + "}\n\n")
    

indent = 12
namespaces = deque()

for subdir, _, files in os.walk("..\\heat-range\\resources"):
    
    filepath = subdir[subdir.find('resources') + len('resources\\') :] . split("\\")

    for x, y in itertools.zip_longest(filepath, namespaces.copy()):
        if x != y:
            if x == None:  
                indent -= 4
                closeNamespace(indent)
                namespaces.pop()
                continue

            if y != None:
                indent -= 4
                closeNamespace(indent)
                namespaces.pop()

            if x:
                genNamespace(x.title(), indent)
                indent += 4
                namespaces.append(x)
                continue

    for file in files:
        filepath = subdir + os.sep + file
        filepath = filepath[filepath.index("\\") + 1:]
        filepath = filepath[filepath.index("\\") + 1:]
        
        filename = filepath[filepath.rfind("\\") + 1:]
        filename, ext, *_ = filename.split('.')
        filename = filename.replace("_", " ").replace("-", " ").title().replace(" ", "")

        if ext not in {"png", "mp3", "jpg"}:
            filename += "_" + ext.upper()

        filepath = filepath.replace('\\', '/')

        print(filepath, " -> ", filename)

        if filepath.endswith(".import"):
            continue

        defFile.write(f"{' '*indent}public const string {filename} = \"{filepath}\";\n")


while indent != 0:
    indent -= 4
    closeNamespace(indent)

defFile.close()


input("press enter to exit")